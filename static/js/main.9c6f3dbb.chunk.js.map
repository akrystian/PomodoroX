{"version":3,"sources":["Header.js","Footer.js","Aim.jsx","timers/Blank.jsx","timers/counter/NewTimer.jsx","timers/LongBreak.jsx","timers/Regular.jsx","timers/ShortBreak.jsx","timers/TestBreak.jsx","Switch.jsx","Main.jsx","App.jsx","serviceWorker.js","index.js","Const.jsx"],"names":["Header","Navbar","bg","variant","Brand","href","Footer","sticky","Aim","states","useState","isTodo","setTodo","InputGroup","className","FormControl","placeholder","Append","Button","type","onClick","length","Blank","Card","Body","NewTimer","timerSeconds","showNotifications","calculateTime","secondsOffset","time","Date","setSeconds","getSeconds","useTimer","expiryTimestamp","onExpire","timeUpHook","seconds","minutes","start","pause","restart","reminderTimer","reminderTimeUpHook","reminderTimer2","autoStart","timer","console","log","Audio","play","twoSign","count","Row","Col","LongBreak","Regular","ShortBreak","TestBreak","Switch","componentName","show","LONG_BREAK","SHORT_BREAK","REGULAR","TEST_BREAK","Main","state","value","numTask","handleChange","val","setState","addTask","ReactNotifications","n","supported","handleNotificationClick","event","close","target","tag","tasks","index","this","push","ToggleButtonGroup","name","onChange","ToggleButton","onRef","ref","title","body","icon","timeout","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","NONE"],"mappings":"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","file":"static/js/main.9c6f3dbb.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">PomodoroX</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Footer() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n            PomidoroX &copy; 2021\n        </Navbar>\n    )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { Button, FormControl, InputGroup } from 'react-bootstrap'\n\nfunction Aim() {\n    const states = ['todo', 'working', 'done']\n    const colors = ['secondary', 'primary', 'success']\n    const [isTodo, setTodo] = useState(0)\n\n    const handleClick = () => {\n        setTodo((isTodo + 1) % states.length)\n    }\n\n    return (\n        <div>\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder=\"Task\"\n                    aria-label=\"Task\"\n                    aria-describedby=\"basic-addon2\"\n                />\n                <InputGroup.Append>\n                    <Button\n                        type=\"checkbox\"\n                        onClick={() => handleClick()}\n                        variant={colors[isTodo]}\n                    >\n                        {states[isTodo]}\n                    </Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </div>\n    )\n}\n\nexport default Aim\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nfunction Blank() {\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>Choose period.</Card.Body>\n        </Card>\n    )\n}\n\nexport default Blank\n","import React, { Fragment } from 'react'\nimport { Row, Col, Button, Card } from 'react-bootstrap'\nimport { useTimer } from 'react-timer-hook'\n\nimport { FaRedo, FaPause, FaPlay } from 'react-icons/fa'\n\nexport const NewTimer = ({ timerSeconds, showNotifications }) => {\n    const reminderSeconds = 300\n    const calculateTime = (secondsOffset) => {\n        const time = new Date()\n        time.setSeconds(time.getSeconds() + secondsOffset)\n        return time\n    }\n\n    const { seconds, minutes, start, pause, restart } = useTimer({\n        expiryTimestamp: calculateTime(timerSeconds),\n        onExpire: () => timeUpHook(),\n    })\n\n    const reminderTimer = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => reminderTimeUpHook(reminderTimer2),\n        autoStart: false,\n    })\n\n    const reminderTimer2 = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => reminderTimeUpHook(reminderTimer),\n        autoStart: false,\n    })\n\n    const reminderTimeUpHook = (timer) => {\n        console.log('reminderTimeUpHook')\n        showNotifications.showNotifications()\n        timer.restart(calculateTime(reminderSeconds))\n    }\n\n    const timeUpHook = () => {\n        const sound = new Audio(\n            'https://actions.google.com/sounds/v1/alarms/radiation_meter.ogg'\n        )\n        sound.play()\n        showNotifications.showNotifications()\n        reminderTimer.start()\n    }\n\n    const twoSign = (count) => {\n        return count >= 10 ? count : '0' + count\n    }\n\n    return (\n        <Fragment>\n            <Card className=\"m-2\">\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <code>\n                                <h1>\n                                    {twoSign(minutes)}:{twoSign(seconds)}\n                                </h1>\n                            </code>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button onClick={start}>\n                                <FaPlay />\n                            </Button>\n                            <Button onClick={pause}>\n                                <FaPause />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    const time = new Date()\n                                    time.setSeconds(\n                                        time.getSeconds() + timerSeconds\n                                    )\n                                    restart(time)\n                                }}\n                            >\n                                <FaRedo />\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default NewTimer\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction LongBreak(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={10 * 60}\n            showNotifications={showNotifications}\n        />\n    )\n}\n\nexport default LongBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction Regular(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={25 * 60}\n            showNotifications={showNotifications}\n        />\n    )\n}\n\nexport default Regular\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction ShortBreak(showNotifications) {\n    return (\n        <NewTimer timerSeconds={5 * 60} showNotifications={showNotifications} />\n    )\n}\n\nexport default ShortBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction TestBreak(showNotifications) {\n    return <NewTimer timerSeconds={5} showNotifications={showNotifications} />\n}\n\nexport default TestBreak\n","import React from 'react'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Blank from './timers/Blank'\nimport LongBreak from './timers/LongBreak'\nimport Regular from './timers/Regular'\nimport ShortBreak from './timers/ShortBreak'\nimport TestBreak from './timers/TestBreak'\n\nexport const Switch = ({ show, showNotifications }) => {\n    const selectedElement = (componentName) => {\n        if (componentName === LONG_BREAK) {\n            return <LongBreak showNotifications={showNotifications} />\n        } else if (componentName === SHORT_BREAK) {\n            return <ShortBreak showNotifications={showNotifications} />\n        } else if (componentName === REGULAR) {\n            return <Regular showNotifications={showNotifications} />\n        } else if (componentName === TEST_BREAK) {\n            return <TestBreak showNotifications={showNotifications} />\n        } else {\n            return <Blank showNotifications={showNotifications} />\n        }\n    }\n\n    return selectedElement(show)\n}\n\nexport default Switch\n","import React from 'react'\nimport {\n    Row,\n    Col,\n    ToggleButton,\n    ToggleButtonGroup,\n    Button,\n} from 'react-bootstrap'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Aim from './Aim'\nimport { Switch } from './Switch'\nimport ReactNotifications from 'react-browser-notifications'\n\nclass Main extends React.Component {\n    state = {\n        value: [],\n        numTask: 1,\n    }\n\n    handleChange = (val) => this.setState({ value: val })\n\n    addTask = () => this.setState({ numTask: this.state.numTask + 1 })\n\n    showNotifications = () => {\n        if (ReactNotifications.n.supported()) {\n            ReactNotifications.n.show()\n        }\n    }\n\n    handleNotificationClick = (event) => {\n        ReactNotifications.n.close(event.target.tag)\n    }\n\n    render() {\n        const tasks = []\n\n        for (let index = 0; index < this.state.numTask; index++) {\n            tasks.push(<Aim />)\n        }\n\n        return (\n            <div className=\"m-2\">\n                <Row>\n                    <Col>{tasks}</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button\n                            className=\"float-right\"\n                            variant=\"secondary\"\n                            onClick={() => this.addTask()}\n                        >\n                            +\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ToggleButtonGroup\n                            className=\"flex-wrap\"\n                            type=\"radio\"\n                            name=\"options\"\n                            value={this.state.value}\n                            onChange={this.handleChange}\n                        >\n                            <ToggleButton value={REGULAR}>Regular</ToggleButton>\n                            <ToggleButton value={SHORT_BREAK}>\n                                Short break\n                            </ToggleButton>\n                            <ToggleButton value={LONG_BREAK}>\n                                Long break\n                            </ToggleButton>\n                            <ToggleButton value={TEST_BREAK}>\n                                Test break\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Switch\n                            show={this.state.value}\n                            showNotifications={() => this.showNotifications()}\n                        />\n                        <ReactNotifications\n                            onRef={(ref) => (ReactNotifications.n = ref)}\n                            title=\"Yep!\" // Required\n                            body=\"Time is up!\"\n                            icon=\"icon.png\"\n                            timeout=\"5000\"\n                            onClick={(event) =>\n                                this.handleNotificationClick(event)\n                            }\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Main from './Main'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header name={'PomodoroX'} />\n            <Main />\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = {\n    REGULAR: 'REGULAR',\n    SHORT_BREAK: 'SHORT_BREAK',\n    LONG_BREAK: 'LONG_BREAK',\n    TEST_BREAK: 'TEST_BREAK',\n    NONE: 'NONE',\n}\n"],"sourceRoot":""}