{"version":3,"sources":["Header.js","Footer.js","Aim.jsx","timers/Blank.jsx","timers/counter/NewTimer.jsx","timers/LongBreak.jsx","timers/Regular.jsx","timers/ShortBreak.jsx","timers/TestBreak.jsx","Switch.jsx","Main.jsx","App.jsx","serviceWorker.js","index.js","Const.jsx"],"names":["Header","Navbar","bg","variant","Brand","href","Footer","sticky","Aim","label","states","useState","isTodo","setTodo","Card","className","Body","Button","type","onClick","length","Blank","NewTimer","timerSeconds","showNotifications","reminderSeconds","debug","reminderSound","calculateTime","secondsOffset","time","Date","setSeconds","getSeconds","useTimer","expiryTimestamp","onExpire","timeUpHook","reminderTimer","seconds","minutes","start","pause","restart","reminderTimer2","autoStart","timer","soundFile","isReminder","Audio","play","twoSign","count","debugTimer","Row","Col","LongBreak","Regular","ShortBreak","TestBreak","Switch","componentName","show","LONG_BREAK","SHORT_BREAK","REGULAR","TEST_BREAK","Main","state","labels","mode","numTask","notificationsState","title","body","handleChange","setState","localStorage","setItem","JSON","stringify","messageLabels","timeUp","reminder","updateLabels","newTitle","newBody","handleChangeMode","handleChangeLabel","addTask","concat","setupRemider","setupTimesUp","ReactNotifications","n","supported","handleNotificationClick","event","close","target","tag","s","getItem","this","parse","tasks","map","it","InputGroup","FormControl","value","onChange","e","Append","ToggleButtonGroup","name","ToggleButton","isRemider","onRef","ref","icon","timeout","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","NONE"],"mappings":"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","file":"static/js/main.ed3caa0a.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">PomodoroX</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Footer() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n            PomidoroX &copy; 2021\n        </Navbar>\n    )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { Button, Card } from 'react-bootstrap'\n\nexport const Aim = ({ label }) => {\n    const states = ['todo', 'working', 'done']\n    const colors = ['secondary', 'primary', 'success']\n    const [isTodo, setTodo] = useState(0)\n\n    const handleClick = () => {\n        setTodo((isTodo + 1) % states.length)\n    }\n\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>\n                <div className=\"float-left\">\n                    <Button\n                        type=\"checkbox\"\n                        onClick={() => handleClick()}\n                        variant={colors[isTodo]}\n                    >\n                        {states[isTodo]}\n                    </Button>&nbsp;&nbsp;\n                    {label}\n                </div>\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default Aim\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nfunction Blank() {\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>Choose period.</Card.Body>\n        </Card>\n    )\n}\n\nexport default Blank\n","import React, { Fragment } from 'react'\nimport { Row, Col, Button, Card } from 'react-bootstrap'\nimport { useTimer } from 'react-timer-hook'\n\nimport { FaRedo, FaPause, FaPlay } from 'react-icons/fa'\n\nexport const NewTimer = ({\n    timerSeconds,\n    showNotifications,\n    reminderSeconds = 300,\n    debug = false,\n}) => {\n    const reminderSound =\n        'https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg'\n    const regularSound = reminderSound\n\n    const calculateTime = (secondsOffset) => {\n        const time = new Date()\n        time.setSeconds(time.getSeconds() + secondsOffset)\n        return time\n    }\n\n    const { seconds, minutes, start, pause, restart } = useTimer({\n        expiryTimestamp: calculateTime(timerSeconds),\n        onExpire: () => timeUpHook(reminderTimer, regularSound, false),\n    })\n\n    const reminderTimer = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => timeUpHook(reminderTimer2, reminderSound, true),\n        autoStart: false,\n    })\n\n    const reminderTimer2 = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => timeUpHook(reminderTimer, reminderSound, true),\n        autoStart: false,\n    })\n\n    const pauseAll = () => {\n        pause()\n        reminderTimer.pause()\n        reminderTimer2.pause()\n    }\n\n    const timeUpHook = (timer, soundFile, isReminder) => {\n        timer.restart(calculateTime(reminderSeconds))\n        const sound = new Audio(soundFile)\n        sound.play()\n        showNotifications.showNotifications(isReminder)\n    }\n\n    const twoSign = (count) => {\n        return count >= 10 ? count : '0' + count\n    }\n\n    const debugTimer = !debug ? null : (\n        <Row>\n            <Col>\n                <h1>\n                    {twoSign(reminderTimer.minutes)}:\n                    {twoSign(reminderTimer.seconds)}\n                </h1>\n                <h1>\n                    {twoSign(reminderTimer2.minutes)}:\n                    {twoSign(reminderTimer2.seconds)}\n                </h1>\n            </Col>\n        </Row>\n    )\n\n    return (\n        <Fragment>\n            <Card className=\"m-2\">\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <code>\n                                <h1>\n                                    {twoSign(minutes)}:{twoSign(seconds)}\n                                </h1>\n                            </code>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>{debugTimer}</Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button onClick={start}>\n                                <FaPlay />\n                            </Button>\n                            <Button onClick={pause}>\n                                <FaPause />\n                            </Button>\n                            <Button variant=\"success\" onClick={pauseAll}>\n                                <FaPause />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    const time = new Date()\n                                    time.setSeconds(time.getSeconds() + 300)\n                                    restart(time)\n                                }}\n                            >\n                                <FaRedo />\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default NewTimer\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction LongBreak(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={10 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={5 * 60}\n        />\n    )\n}\n\nexport default LongBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction Regular(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={25 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={5 * 60}\n        />\n    )\n}\n\nexport default Regular\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction ShortBreak(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={5 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={2 * 60}\n        />\n    )\n}\n\nexport default ShortBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction TestBreak(showNotifications) {\n    return (\n        <NewTimer\n            timerSeconds={10}\n            showNotifications={showNotifications}\n            reminderSeconds={10}\n            debug={true}\n        />\n    )\n}\n\nexport default TestBreak\n","import React from 'react'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Blank from './timers/Blank'\nimport LongBreak from './timers/LongBreak'\nimport Regular from './timers/Regular'\nimport ShortBreak from './timers/ShortBreak'\nimport TestBreak from './timers/TestBreak'\n\nexport const Switch = ({ show, showNotifications }) => {\n    const selectedElement = (componentName) => {\n        if (componentName === LONG_BREAK) {\n            return <LongBreak showNotifications={showNotifications} />\n        } else if (componentName === SHORT_BREAK) {\n            return <ShortBreak showNotifications={showNotifications} />\n        } else if (componentName === REGULAR) {\n            return <Regular showNotifications={showNotifications} />\n        } else if (componentName === TEST_BREAK) {\n            return <TestBreak showNotifications={showNotifications} />\n        } else {\n            return <Blank showNotifications={showNotifications} />\n        }\n    }\n\n    return selectedElement(show)\n}\n\nexport default Switch\n","import React from 'react'\nimport {\n    Row,\n    Col,\n    ToggleButton,\n    ToggleButtonGroup,\n    Button,\n    FormControl,\n    InputGroup,\n} from 'react-bootstrap'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Aim from './Aim'\nimport { Switch } from './Switch'\nimport ReactNotifications from 'react-browser-notifications'\n\nclass Main extends React.Component {\n    state = {\n        labels: [],\n        mode: [],\n        numTask: 1,\n        label: '',\n        notificationsState: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        }\n    }\n\n    componentDidMount() {\n        var s = localStorage.getItem('state')\n        if (s != null) {\n            this.setState(JSON.parse(s))\n        }\n    }\n\n    handleChange = (labels) => {\n        this.setState({ labels: labels })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    messageLabels = {\n        timeUp: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        },\n        reminder: {\n            title: 'Reminder!!!',\n            body: 'You should run the timer!!!!',\n        },\n    }\n\n    updateLabels = (newTitle, newBody) =>\n        this.setState({ notificationsState: { title: newTitle, body: newBody } })\n\n    handleChangeMode = (mode) => {\n        this.setState({ mode: mode })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    handleChangeLabel = (label) => {\n        this.setState({ label: label })\n    }\n\n    addTask = (label) => {\n        if (label != null) {\n            this.setState({ labels: this.state.labels.concat([label]) })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    showNotifications = (isReminder) => {\n        if (isReminder) {\n            this.setupRemider()\n        } else {\n            this.setupTimesUp()\n        }\n        if (ReactNotifications.n.supported()) {\n            ReactNotifications.n.show()\n        }\n    }\n\n    setupRemider = () =>\n        this.updateLabels(\n            this.messageLabels.reminder.title,\n            this.messageLabels.reminder.body\n        )\n\n    setupTimesUp = () =>\n        this.updateLabels(\n            this.messageLabels.timeUp.title,\n            this.messageLabels.timeUp.body\n        )\n\n    handleNotificationClick = (event) => {\n        ReactNotifications.n.close(event.target.tag)\n    }\n\n    render() {\n        const tasks = this.state.labels.map((it) => <Aim label={it} />)\n\n        return (\n            <div className=\"m-2\">\n                <Row>\n                \n                    <Col>{tasks}</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                value={this.state.label}\n                                aria-label={this.state.label}\n                                aria-describedby=\"basic-addon2\"\n                                onChange={(e) =>\n                                    this.handleChangeLabel(e.target.value)\n                                }\n                            />\n                            <InputGroup.Append>\n                                <Button\n                                    onClick={() => this.addTask(this.state.label)}\n                                >\n                                    +\n                                </Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ToggleButtonGroup\n                            className=\"flex-wrap\"\n                            type=\"radio\"\n                            name=\"options\"\n                            value={this.state.mode}\n                            onChange={this.handleChangeMode}\n                        >\n                            <ToggleButton value={REGULAR}>Regular</ToggleButton>\n                            <ToggleButton value={SHORT_BREAK}>\n                                Short break\n                            </ToggleButton>\n                            <ToggleButton value={LONG_BREAK}>\n                                Long break\n                            </ToggleButton>\n                            <ToggleButton value={TEST_BREAK}>\n                                Test break\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Switch\n                            show={this.state.mode}\n                            showNotifications={(isRemider) => this.showNotifications(isRemider)}\n                        />\n                        <ReactNotifications\n                            onRef={(ref) => (ReactNotifications.n = ref)}\n                            title={this.state.notificationsState.title} // Required\n                            body={this.state.notificationsState.body}\n                            icon=\"icon.png\"\n                            timeout=\"5000\"\n                            onClick={(event) =>\n                                this.handleNotificationClick(event)\n                            }\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Main from './Main'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header name={'PomodoroX'} />\n            <Main />\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = {\n    REGULAR: 'REGULAR',\n    SHORT_BREAK: 'SHORT_BREAK',\n    LONG_BREAK: 'LONG_BREAK',\n    TEST_BREAK: 'TEST_BREAK',\n    NONE: 'NONE',\n}\n"],"sourceRoot":""}