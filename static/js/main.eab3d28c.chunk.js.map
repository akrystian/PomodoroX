{"version":3,"sources":["Header.js","Footer.js","Aim.jsx","timers/Blank.jsx","timers/counter/NewTimer.jsx","timers/LongBreak.jsx","timers/Regular.jsx","timers/ShortBreak.jsx","timers/TestBreak.jsx","Switch.jsx","Main.jsx","App.jsx","serviceWorker.js","index.js","Const.jsx"],"names":["Header","Navbar","bg","variant","Brand","href","Footer","setDebugMode","fixed","Button","onClick","size","Aim","index","label","deleteHook","upHook","downHook","minusPointHook","plusPointHook","states","useState","isTodo","setTodo","type","Card","className","Body","length","ButtonGroup","Badge","pill","points","Blank","NewTimer","timerSeconds","showNotifications","reminderSeconds","debug","reminderSound","calculateTime","secondsOffset","time","Date","setSeconds","getSeconds","useTimer","expiryTimestamp","onExpire","timeUpHook","reminderTimer","seconds","minutes","start","pause","restart","reminderTimer2","autoStart","timer","soundFile","isReminder","Audio","play","twoSign","count","debugTimer","Row","Col","LongBreak","debugMode","Regular","ShortBreak","TestBreak","Switch","componentName","show","LONG_BREAK","SHORT_BREAK","REGULAR","TEST_BREAK","Main","state","labels","mode","numTask","notificationsState","title","body","handleChange","setState","localStorage","setItem","JSON","stringify","messageLabels","timeUp","reminder","updateLabels","newTitle","newBody","handleChangeMode","handleChangeLabel","addTask","concat","setupRemider","setupTimesUp","ReactNotifications","n","supported","handleNotificationClick","event","close","target","tag","removeTask","copy","splice","moveUpTask","value","moveDownTask","console","log","plusPoints","minusPoints","debugElement","props","ToggleButton","s","getItem","this","parse","incrementer","tasks","map","it","InputGroup","FormControl","onChange","e","Append","ToggleButtonGroup","name","isRemider","onRef","ref","icon","timeout","React","Component","App","on","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","NONE"],"mappings":"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","file":"static/js/main.eab3d28c.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">PomodoroX</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Navbar, Button } from 'react-bootstrap'\n\nfunction Footer({ setDebugMode }) {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"bottom\">\n            <Button variant=\"link\" onClick={() => setDebugMode(true)} size=\"sm\">\n                PomidoroX &copy; 2021\n            </Button>\n        </Navbar>\n    )\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { Badge, Button, ButtonGroup, Card } from 'react-bootstrap'\nimport {\n    FaArrowDown,\n    FaArrowUp,\n    FaMinusCircle,\n    FaPlusCircle,\n    FaTrash,\n} from 'react-icons/fa'\n\nexport const Aim = ({\n    index,\n    label,\n    deleteHook,\n    upHook,\n    downHook,\n    minusPointHook,\n    plusPointHook,\n}) => {\n    const states = ['todo', 'working', 'done']\n    const colors = ['secondary', 'primary', 'success']\n    const [isTodo, setTodo] = useState(0)\n\n    const handleClick = () => {\n        setTodo((isTodo + 1) % states.length)\n    }\n\n    return (\n        <>\n            <style type=\"text/css\">\n                {`\n            .card-body {\n              padding: 0.1rem 0.1rem;\n             }\n            `}\n            </style>\n            <Card className=\"m-2\">\n                <Card.Body>\n                    <div className=\"float-left\">\n                        <Button\n                            type=\"checkbox\"\n                            onClick={() => handleClick()}\n                            variant={colors[isTodo]}\n                            size=\"sm\"\n                        >\n                            {states[isTodo]}\n                        </Button>{' '}\n                        <ButtonGroup>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => plusPointHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaPlusCircle />\n                            </Button>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => minusPointHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaMinusCircle />\n                            </Button>\n                        </ButtonGroup>{' '}\n                        <Badge pill variant=\"secondary\">\n                            {label.points}\n                        </Badge>{' '}\n                        <strong>{label.label}</strong>\n                    </div>\n                    <div className=\"float-right\">\n                        <ButtonGroup>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => upHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaArrowUp />\n                            </Button>\n\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => downHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaArrowDown />\n                            </Button>\n                        </ButtonGroup>{' '}\n                        <Button\n                            variant=\"danger\"\n                            onClick={() => deleteHook(index)}\n                            size=\"sm\"\n                        >\n                            <FaTrash />\n                        </Button>\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    )\n}\n\nexport default Aim\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nfunction Blank() {\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>Choose period.</Card.Body>\n        </Card>\n    )\n}\n\nexport default Blank\n","import React, { Fragment } from 'react'\nimport { Row, Col, Button, Card } from 'react-bootstrap'\nimport { useTimer } from 'react-timer-hook'\n\nimport { FaRedo, FaPause, FaPlay } from 'react-icons/fa'\n\nexport const NewTimer = ({\n    timerSeconds,\n    showNotifications,\n    reminderSeconds = 300,\n    debug = false,\n}) => {\n    const reminderSound =\n        'https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg'\n    const regularSound = reminderSound\n\n    const calculateTime = (secondsOffset) => {\n        const time = new Date()\n        time.setSeconds(time.getSeconds() + secondsOffset)\n        return time\n    }\n\n    const { seconds, minutes, start, pause, restart } = useTimer({\n        expiryTimestamp: calculateTime(timerSeconds),\n        onExpire: () => timeUpHook(reminderTimer, regularSound, false),\n    })\n\n    const reminderTimer = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => timeUpHook(reminderTimer2, reminderSound, true),\n        autoStart: false,\n    })\n\n    const reminderTimer2 = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () => timeUpHook(reminderTimer, reminderSound, true),\n        autoStart: false,\n    })\n\n    const pauseAll = () => {\n        pause()\n        reminderTimer.pause()\n        reminderTimer2.pause()\n    }\n\n    const timeUpHook = (timer, soundFile, isReminder) => {\n        timer.restart(calculateTime(reminderSeconds))\n        const sound = new Audio(soundFile)\n        sound.play()\n        showNotifications(isReminder)\n    }\n\n    const twoSign = (count) => {\n        return count >= 10 ? count : '0' + count\n    }\n\n    const debugTimer = !debug ? null : (\n        <Row>\n            <Col>\n                <h1>\n                    {twoSign(reminderTimer.minutes)}:\n                    {twoSign(reminderTimer.seconds)}\n                </h1>\n                <h1>\n                    {twoSign(reminderTimer2.minutes)}:\n                    {twoSign(reminderTimer2.seconds)}\n                </h1>\n            </Col>\n        </Row>\n    )\n\n    return (\n        <Fragment>\n            <Card className=\"m-2\">\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <code>\n                                <h1>\n                                    {twoSign(minutes)}:{twoSign(seconds)}\n                                </h1>\n                            </code>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>{debugTimer}</Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button onClick={start}>\n                                <FaPlay />\n                            </Button>\n                            <Button onClick={pause}>\n                                <FaPause />\n                            </Button>\n                            <Button variant=\"success\" onClick={pauseAll}>\n                                <FaPause />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    const time = new Date()\n                                    time.setSeconds(time.getSeconds() + 300)\n                                    restart(time)\n                                }}\n                            >\n                                <FaRedo />\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default NewTimer\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction LongBreak({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={10 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={5 * 60}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default LongBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction Regular({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={25 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={5 * 60}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default Regular\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction ShortBreak({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={5 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={2 * 60}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default ShortBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction TestBreak({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={10}\n            showNotifications={showNotifications}\n            reminderSeconds={10}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default TestBreak\n","import React from 'react'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Blank from './timers/Blank'\nimport LongBreak from './timers/LongBreak'\nimport Regular from './timers/Regular'\nimport ShortBreak from './timers/ShortBreak'\nimport TestBreak from './timers/TestBreak'\n\nexport const Switch = ({ show, showNotifications, debugMode }) => {\n    const selectedElement = (componentName) => {\n        if (componentName === LONG_BREAK) {\n            return (\n                <LongBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else if (componentName === SHORT_BREAK) {\n            return (\n                <ShortBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else if (componentName === REGULAR) {\n            return (\n                <Regular\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else if (componentName === TEST_BREAK) {\n            return (\n                <TestBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else {\n            return <Blank showNotifications={showNotifications} />\n        }\n    }\n\n    return selectedElement(show)\n}\n\nexport default Switch\n","import React from 'react'\nimport {\n    Row,\n    Col,\n    ToggleButton,\n    ToggleButtonGroup,\n    Button,\n    FormControl,\n    InputGroup,\n} from 'react-bootstrap'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Aim from './Aim'\nimport { Switch } from './Switch'\nimport ReactNotifications from 'react-browser-notifications'\n\nclass Main extends React.Component {\n    state = {\n        labels: [],\n        mode: [],\n        numTask: 1,\n        label: '',\n        notificationsState: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        },\n    }\n\n    componentDidMount() {\n        var s = localStorage.getItem('state')\n        if (s != null) {\n            this.setState(JSON.parse(s))\n        }\n    }\n\n    handleChange = (labels) => {\n        this.setState({ labels: labels })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    messageLabels = {\n        timeUp: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        },\n        reminder: {\n            title: 'Reminder!!!',\n            body: 'You should run the timer!!!!',\n        },\n    }\n\n    updateLabels = (newTitle, newBody) =>\n        this.setState({\n            notificationsState: { title: newTitle, body: newBody },\n        })\n\n    handleChangeMode = (mode) => {\n        this.setState({ mode: mode })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    handleChangeLabel = (label) => {\n        this.setState({ label: label })\n    }\n\n    addTask = (label) => {\n        if (label != null) {\n            this.setState({\n                labels: this.state.labels.concat([{ label: label, points: 0 }]),\n            })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    showNotifications = (isReminder) => {\n        if (isReminder) {\n            this.setupRemider()\n        } else {\n            this.setupTimesUp()\n        }\n        if (ReactNotifications.n.supported()) {\n            ReactNotifications.n.show()\n        }\n    }\n\n    setupRemider = () =>\n        this.updateLabels(\n            this.messageLabels.reminder.title,\n            this.messageLabels.reminder.body\n        )\n\n    setupTimesUp = () =>\n        this.updateLabels(\n            this.messageLabels.timeUp.title,\n            this.messageLabels.timeUp.body\n        )\n\n    handleNotificationClick = (event) => {\n        ReactNotifications.n.close(event.target.tag)\n    }\n\n    removeTask = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy.splice(index, 1)\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    removeTask = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy.splice(index, 1)\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    moveUpTask = (index) => {\n        if (\n            this.state.labels.length > 1 &&\n            index > 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            var value = copy[index]\n            copy[index] = copy[index - 1]\n            copy[index - 1] = value\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    moveDownTask = (index) => {\n        console.log('moveDownTask ' + index)\n        if (\n            this.state.labels.length > 1 &&\n            index >= 0 &&\n            this.state.labels.length > index + 1\n        ) {\n            console.log('moveDownTask inn ' + index)\n            var copy = [...this.state.labels]\n            var value = copy[index]\n            copy[index] = copy[index + 1]\n            copy[index + 1] = value\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    plusPoints = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy[index].points = copy[index].points + 1\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    minusPoints = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            if (copy[index].points > 0) {\n                copy[index].points = copy[index].points - 1\n                this.setState({ labels: copy })\n                localStorage.setItem('state', JSON.stringify(this.state))\n            }\n        }\n    }\n\n    debugElement = (debugMode) => {\n        if (this.props.debugMode) {\n            return <ToggleButton value={TEST_BREAK}>Test break</ToggleButton>\n        }\n    }\n\n    render() {\n        var incrementer = 0\n        const tasks = this.state.labels.map((it) => (\n            <Aim\n                index={incrementer++}\n                label={it}\n                deleteHook={this.removeTask}\n                plusPointHook={this.plusPoints}\n                minusPointHook={this.minusPoints}\n                upHook={this.moveUpTask}\n                downHook={this.moveDownTask}\n            />\n        ))\n\n        return (\n            <div className=\"m-2\">\n                <Row>\n                    <Col>{tasks}</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                value={this.state.label}\n                                aria-label={this.state.label}\n                                aria-describedby=\"basic-addon2\"\n                                onChange={(e) =>\n                                    this.handleChangeLabel(e.target.value)\n                                }\n                            />\n                            <InputGroup.Append>\n                                <Button\n                                    onClick={() =>\n                                        this.addTask(this.state.label)\n                                    }\n                                >\n                                    +\n                                </Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ToggleButtonGroup\n                            className=\"flex-wrap\"\n                            type=\"radio\"\n                            name=\"options\"\n                            value={this.state.mode}\n                            onChange={this.handleChangeMode}\n                        >\n                            <ToggleButton value={REGULAR}>Regular</ToggleButton>\n                            <ToggleButton value={SHORT_BREAK}>\n                                Short break\n                            </ToggleButton>\n                            <ToggleButton value={LONG_BREAK}>\n                                Long break\n                            </ToggleButton>\n                            {this.debugElement(this.props.debugMode)}\n                        </ToggleButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Switch\n                            show={this.state.mode}\n                            showNotifications={(isRemider) =>\n                                this.showNotifications(isRemider)\n                            }\n                            debugMode={this.props.debugMode}\n                        />\n                        <ReactNotifications\n                            onRef={(ref) => (ReactNotifications.n = ref)}\n                            title={this.state.notificationsState.title} // Required\n                            body={this.state.notificationsState.body}\n                            icon=\"icon.png\"\n                            timeout=\"5000\"\n                            onClick={(event) =>\n                                this.handleNotificationClick(event)\n                            }\n                        />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Main from './Main'\n\nclass App extends React.Component {\n    state = {\n        debugMode: false,\n    }\n\n    setDebugMode = (on) => {\n        this.setState({ debugMode: on })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header name={'PomodoroX'} />\n                <Main debugMode={this.state.debugMode} />\n                <Footer setDebugMode={this.setDebugMode} />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = {\n    REGULAR: 'REGULAR',\n    SHORT_BREAK: 'SHORT_BREAK',\n    LONG_BREAK: 'LONG_BREAK',\n    TEST_BREAK: 'TEST_BREAK',\n    NONE: 'NONE',\n}\n"],"sourceRoot":""}