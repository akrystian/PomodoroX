{"version":3,"sources":["Header.js","Footer.js","Aim.jsx","timers/Blank.jsx","timers/LongBreak.jsx","timers/Regular.jsx","timers/ShortBreak.jsx","Switch.jsx","Main.jsx","App.jsx","serviceWorker.js","index.js","Const.jsx"],"names":["Header","Navbar","bg","variant","Brand","href","Footer","sticky","Aim","states","useState","isTodo","setTodo","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","Append","Button","type","onClick","length","Blank","Card","Body","LongBreak","Regular","ShortBreak","Switch","componentName","show","LONG_BREAK","SHORT_BREAK","REGULAR","Main","value","setValue","Row","Col","ToggleButtonGroup","name","onChange","val","ToggleButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","NONE"],"mappings":"4PAWeA,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eCKSC,MARf,WACE,OACE,kBAACL,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOI,OAAO,UAAxC,wB,uEC4BWC,MA9Bf,WACI,IAAMC,EAAS,CAAC,OAAQ,UAAW,QAEnC,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OACI,6BACI,kBAACC,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACC,EAAA,EAAD,CACIC,YAAY,OACZC,aAAW,OACXC,mBAAiB,iBAErB,kBAACL,EAAA,EAAWM,OAAZ,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,WACLC,QAAS,WAdzBV,GAASD,EAAS,GAAKF,EAAOc,SAedpB,QAnBL,CAAC,YAAa,UAAW,WAmBJQ,IAClBF,EAAOE,Q,QCXda,MAVf,WACI,OACI,kBAACC,EAAA,EAAD,CAAMX,UAAU,OACZ,kBAACW,EAAA,EAAKC,KAAN,yBCEGC,MANf,WACI,OACI,0DCIOC,MANf,WACI,OACI,wDCIOC,MANf,WACI,OACI,2DCEKC,EAAS,SAAC,GAAY,IACNC,EADLC,EAAU,EAAVA,KAapB,OAZyBD,EAaDC,KAZCC,aACV,kBAAC,EAAD,MACAF,IAAkBG,cAClB,kBAAC,EAAD,MACAH,IAAkBI,UAClB,kBAAC,EAAD,MAEA,kBAAC,EAAD,OC0BJC,MApCf,WACE,MAA0B1B,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KAGA,OACE,yBAAKxB,UAAU,OACb,kBAACyB,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAIJ,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACA3B,UAAU,YACVO,KAAK,QACLqB,KAAK,UACLL,MAAOA,EACPM,SAlBa,SAACC,GAAD,OAASN,EAASM,KAmB7B,kBAACC,EAAA,EAAD,CAAcR,MAAOF,WAArB,WACA,kBAACU,EAAA,EAAD,CAAcR,MAAOH,eAArB,eACA,kBAACW,EAAA,EAAD,CAAcR,MAAOJ,cAArB,iBAIN,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,kBAAC,EAAD,CAAQR,KAAMK,QClBPS,MAVf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAQ4B,KAAM,cACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,gBEzI5BC,EAAOC,QAAU,CACbjC,QAAS,UACTD,YAAa,cACbD,WAAY,aACZoC,KAAM,U","file":"static/js/main.d52a7050.chunk.js","sourcesContent":["import React from \"react\";\nimport {Navbar} from \"react-bootstrap\";\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">PomodoroX</Navbar.Brand>\n    </Navbar>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\nimport {Navbar} from \"react-bootstrap\";\n\nfunction Footer() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n      PomidoroX &copy; 2020\n    </Navbar>\n  )\n}\n\nexport default Footer;\n","import React, { useState } from \"react\"\nimport { Button, FormControl, InputGroup } from \"react-bootstrap\"\n\nfunction Aim() {\n    const states = ['todo', 'working', 'done']\n    const colors = ['secondary', 'primary', 'success']\n    const [isTodo, setTodo] = useState(0)\n\n    const handleClick = () => {\n        setTodo((isTodo + 1) % states.length);\n    }\n\n    return (\n        <div>\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder=\"Task\"\n                    aria-label=\"Task\"\n                    aria-describedby=\"basic-addon2\"\n                />\n                <InputGroup.Append>\n                    <Button\n                        type=\"checkbox\"\n                        onClick={() => handleClick()}\n                        variant={colors[isTodo]}\n                    >{states[isTodo]}</Button>\n                </InputGroup.Append>\n            </InputGroup>\n        </div>\n    );\n\n}\n\nexport default Aim;","import React from \"react\"\nimport { Card } from \"react-bootstrap\";\n\n\nfunction Blank() {\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>\n                Choose period.\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default Blank;","import React from \"react\"\n\n\nfunction LongBreak() {\n    return (\n        <div>LongBreak component todo</div>\n    )\n}\n\nexport default LongBreak;","import React from \"react\"\n\n\nfunction Regular() {\n    return (\n        <div>Regular component todo</div>\n    )\n}\n\nexport default Regular;","import React from \"react\"\n\n\nfunction ShortBreak() {\n    return (\n        <div>ShortBreak component todo</div>\n    )\n}\n\nexport default ShortBreak;","import React from \"react\"\nimport {LONG_BREAK, REGULAR, SHORT_BREAK} from \"./Const\"\nimport Blank from \"./timers/Blank\";\nimport LongBreak from './timers/LongBreak';\nimport Regular from \"./timers/Regular\";\nimport ShortBreak from \"./timers/ShortBreak\";\n\nexport const Switch = ({show}) => {\n    const selectedElement = (componentName) => {\n        if(componentName === LONG_BREAK) {\n            return <LongBreak />\n        } else if (componentName === SHORT_BREAK) {\n            return <ShortBreak />\n        } else if (componentName === REGULAR) {\n            return <Regular />\n        } else {\n            return <Blank />\n        }\n    }\n\n    return (\n            selectedElement(show)\n        )\n}\n\nexport default Switch;","import React, {useState} from \"react\";\nimport {Row, Col, ToggleButton, ToggleButtonGroup} from \"react-bootstrap\";\nimport {LONG_BREAK, REGULAR, SHORT_BREAK} from \"./Const\"\nimport Aim from \"./Aim\";\nimport { Switch } from './Switch';\n\nfunction Main() {\n  const [value, setValue] = useState([])\n  const handleChange = (val) => setValue(val)\n\n  return (\n    <div className=\"m-2\">\n      <Row>\n        \n        <Col>\n          <Aim />\n        </Col>\n\n      </Row>\n      <Row>\n        <Col>\n          <ToggleButtonGroup \n          className=\"flex-wrap\" \n          type=\"radio\" \n          name=\"options\" \n          value={value}\n          onChange={handleChange}>\n            <ToggleButton value={REGULAR}>Regular</ToggleButton>\n            <ToggleButton value={SHORT_BREAK}>Short break</ToggleButton>\n            <ToggleButton value={LONG_BREAK}>Long break</ToggleButton>\n          </ToggleButtonGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n        <Switch show={value} />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Main;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header name={'PomodoroX'}/>\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    REGULAR: \"REGULAR\",\n    SHORT_BREAK: \"SHORT_BREAK\",\n    LONG_BREAK: \"LONG_BREAK\",\n    NONE: \"NONE\"\n}"],"sourceRoot":""}