{"version":3,"sources":["Const.jsx","Header.js","Footer.js","Aim.jsx","timers/Blank.jsx","timers/counter/NewTimer.jsx","timers/LongBreak.jsx","timers/Regular.jsx","timers/ShortBreak.jsx","timers/TestBreak.jsx","Switch.jsx","Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","REGULAR","SHORT_BREAK","LONG_BREAK","TEST_BREAK","NONE","VERSION","Header","Navbar","bg","variant","Brand","href","Footer","state","license","a","axios","get","then","response","data","split","filter","_","index","at","catch","error","console","log","this","setStateAsync","Promise","resolve","setState","Button","onClick","props","setDebugMode","size","React","Component","Aim","label","deleteHook","upHook","downHook","minusPointHook","plusPointHook","toggleDone","select","selected","type","Card","className","border","done","Body","ToggleButton","id","checked","value","onChange","e","disabled","ButtonGroup","vertical","Badge","pill","points","Blank","NewTimer","timerSeconds","showNotifications","reminderSeconds","debug","autoCount","reminderSound","emptyHook","calculateTime","secondsOffset","time","Date","setSeconds","getSeconds","useTimer","expiryTimestamp","onExpire","timeUpHook","reminderTimer","seconds","minutes","start","pause","restart","isRunning","reminderTimer2","autoStart","timer","soundFile","isReminder","autoCountHook","Audio","play","twoSign","count","debugTimer","Row","Col","pauseWarning","LongBreak","debugMode","Regular","ShortBreak","TestBreak","Switch","componentName","show","Main","labels","mode","numTask","notificationsState","title","body","version","handleChange","localStorage","setItem","JSON","stringify","messageLabels","timeUp","reminder","updateLabels","newTitle","newBody","handleChangeMode","handleChangeLabel","genId","uuidv4","addTask","prevState","concat","setupRemider","setupTimesUp","ReactNotifications","n","supported","handleNotificationClick","event","close","target","tag","removeTask","length","copy","splice","moveUpTask","moveDownTask","plusPoints","minusPoints","debugElement","currentTaskId","findIndex","it","currentTask","current","map","handleEnterKeyPress","charCode","stateString","getItem","savedState","parse","incrementer","tasks","isRemider","onRef","ref","icon","timeout","ToggleButtonGroup","name","InputGroup","FormControl","onKeyPress","Append","App","on","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.56f53e15.chunk.js","sourcesContent":["module.exports = {\n    REGULAR: 'REGULAR',\n    SHORT_BREAK: 'SHORT_BREAK',\n    LONG_BREAK: 'LONG_BREAK',\n    TEST_BREAK: 'TEST_BREAK',\n    NONE: 'NONE',\n    VERSION: 3\n}\n","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nfunction Header() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">PomodoroX</Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Navbar, Button } from 'react-bootstrap'\nimport axios from 'axios'\n\nclass Footer extends React.Component {\n    state = {\n        license: \"\"\n    }\n\n    async componentDidMount() {\n        const license = await axios.get('https://raw.githubusercontent.com/akrystian/pomodorox/master/LICENSE')\n            .then((response) =>\n                response.data\n                    .split(`\\n`)\n                    .filter((_, index) => index === 2)\n                    .at(0)\n\n            )\n            .catch((error) => {\n                console.log(error);\n                return 'PomidoroX'\n            });\n\n        await this.setStateAsync({ license: license })\n    }\n\n    setStateAsync(state) {\n        return new Promise((resolve) => {\n            this.setState(state, resolve)\n        });\n    }\n\n    render() {\n        return <Navbar bg=\"light\" variant=\"light\" >\n            {this.state.license}\n            < Button variant=\"link\" onClick={() => this.props.setDebugMode(true)} size=\"sm\" >\n                .\n            </Button >\n        </Navbar >\n    }\n}\n\nexport default Footer\n","import React from 'react'\nimport { Badge, Button, ButtonGroup, Card, ToggleButton } from 'react-bootstrap'\nimport {\n    FaArrowDown,\n    FaArrowUp,\n    FaHourglassStart,\n    FaMinusCircle,\n    FaPlusCircle,\n    FaTrash,\n} from 'react-icons/fa'\n\nexport const Aim = ({\n    index,\n    label,\n    deleteHook,\n    upHook,\n    downHook,\n    minusPointHook,\n    plusPointHook,\n    toggleDone,\n    select,\n    selected,\n}) => {\n    return (\n        <>\n            <style type=\"text/css\">\n                {`\n                    .card-body {\n                        padding: 0.1rem 0.1rem;\n                    }\n                `}\n            </style>\n            <Card\n                className=\"m-2\"\n                border={label.done ? 'success' : selected ? 'primary' : ''}\n                bg={label.done ? 'success' : selected ? 'primary' : ''}\n            >\n                <Card.Body>\n                    <div className=\"float-left\">\n                        <ToggleButton\n                            className=\"mb-2\"\n                            id=\"toggle-check\"\n                            type=\"checkbox\"\n                            variant=\"light-outline\"\n                            checked={label.done}\n                            value=\"1\"\n                            onChange={(e) => toggleDone(index)}\n                        ></ToggleButton>\n                        <Button\n                            variant=\"secondary\"\n                            size=\"sm\"\n                            disabled={label.done}\n                            onClick={(e) => select(index)}\n                        >\n                            <FaHourglassStart />\n                        </Button>{' '}\n                        <ButtonGroup vertical={true}>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => plusPointHook(index)}\n                                size=\"sm\"\n                                disabled={label.done}\n                            >\n                                <FaPlusCircle />\n                            </Button>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => minusPointHook(index)}\n                                size=\"sm\"\n                                disabled={label.done}\n                            >\n                                <FaMinusCircle />\n                            </Button>\n                        </ButtonGroup>{' '}\n                        <Badge pill variant=\"secondary\">\n                            {label.points}\n                        </Badge>{' '}\n                        <strong>{label.label}</strong>\n                    </div>\n                    <div className=\"float-right\">\n                        <ButtonGroup vertical={true}>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => upHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaArrowUp />\n                            </Button>\n                            <Button\n                                variant=\"secondary\"\n                                onClick={() => downHook(index)}\n                                size=\"sm\"\n                            >\n                                <FaArrowDown />\n                            </Button>\n                        </ButtonGroup>{' '}\n                        <Button\n                            variant=\"danger\"\n                            onClick={() => deleteHook(index)}\n                            size=\"sm\"\n                        >\n                            <FaTrash />\n                        </Button>\n                    </div>\n                </Card.Body>\n            </Card>\n        </>\n    )\n}\n\nexport default Aim\n","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nfunction Blank() {\n    return (\n        <Card className=\"m-2\">\n            <Card.Body>Choose period.</Card.Body>\n        </Card>\n    )\n}\n\nexport default Blank\n","import React, { Fragment } from 'react'\nimport { Row, Col, Button, Card, Badge } from 'react-bootstrap'\nimport { useTimer } from 'react-timer-hook'\n\nimport { FaRedo, FaPause, FaPlay } from 'react-icons/fa'\n\nexport const NewTimer = ({\n    timerSeconds,\n    showNotifications,\n    reminderSeconds = 300,\n    debug = false,\n    autoCount = () => {},\n}) => {\n    const reminderSound =\n        'https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg'\n    const regularSound =\n        'https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'\n\n    const emptyHook = () => {}\n\n    const calculateTime = (secondsOffset) => {\n        const time = new Date()\n        time.setSeconds(time.getSeconds() + secondsOffset)\n        return time\n    }\n\n    const { seconds, minutes, start, pause, restart, isRunning } = useTimer({\n        expiryTimestamp: calculateTime(timerSeconds),\n        onExpire: () =>\n            timeUpHook(reminderTimer, regularSound, false, autoCount),\n    })\n\n    const reminderTimer = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () =>\n            timeUpHook(reminderTimer2, reminderSound, true, emptyHook),\n        autoStart: false,\n    })\n\n    const reminderTimer2 = useTimer({\n        expiryTimestamp: calculateTime(reminderSeconds),\n        onExpire: () =>\n            timeUpHook(reminderTimer, reminderSound, true, emptyHook),\n        autoStart: false,\n    })\n\n    const pauseAll = () => {\n        pause()\n        reminderTimer.pause()\n        reminderTimer2.pause()\n    }\n\n    const isPaused = () => {\n        return !isRunning\n    }\n    const timeUpHook = (timer, soundFile, isReminder, autoCountHook) => {\n        timer.restart(calculateTime(reminderSeconds))\n        autoCountHook()\n        const sound = new Audio(soundFile)\n        sound.play()\n        showNotifications(isReminder)\n    }\n\n    const twoSign = (count) => {\n        return count >= 10 ? count : '0' + count\n    }\n\n    const debugTimer = !debug ? null : (\n        <Row>\n            <Col>\n                <h1>\n                    {twoSign(reminderTimer.minutes)}:\n                    {twoSign(reminderTimer.seconds)}\n                </h1>\n                <h1>\n                    {twoSign(reminderTimer2.minutes)}:\n                    {twoSign(reminderTimer2.seconds)}\n                </h1>\n            </Col>\n        </Row>\n    )\n\n    const pauseWarning = !isPaused() ? null : (\n        <h1>\n            <>\n                <style type=\"text/css\">\n                    {`\n                    .blinking {\n                        animation: 2.0s linear infinite blinking;\n                    }\n                    \n                    @keyframes blinking {\n                        0% {opacity: 0;}\n                        50% {opacity: 1;}\n                        100% {opacity: 0;}\n                    }\n                    `}\n                </style>\n                <Badge variant=\"danger\" className=\"blinking\">\n                    Timer Stopped!\n                </Badge>\n            </>\n        </h1>\n    )\n\n    return (\n        <Fragment>\n            <Card className=\"m-2\">\n                <Card.Body>\n                    <Row>\n                        <Col>\n                            <code>\n                                <h1>\n                                    {twoSign(minutes)}:{twoSign(seconds)}\n                                </h1>\n                            </code>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>{pauseWarning}</Col>\n                    </Row>\n                    <Row>\n                        <Col>{debugTimer}</Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button onClick={start}>\n                                <FaPlay />\n                            </Button>\n                            <Button onClick={pause}>\n                                <FaPause />\n                            </Button>\n                            <Button variant=\"success\" onClick={pauseAll}>\n                                <FaPause />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    const time = new Date()\n                                    time.setSeconds(time.getSeconds() + 300)\n                                    restart(time)\n                                }}\n                            >\n                                <FaRedo />\n                            </Button>\n                        </Col>\n                    </Row>\n                </Card.Body>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default NewTimer\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction LongBreak({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={10 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={1 * 30}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default LongBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction Regular({ showNotifications, debugMode, autoCount }) {\n    return (\n        <NewTimer\n            timerSeconds={25 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={1 * 30}\n            debug={debugMode}\n            autoCount={autoCount}\n        />\n    )\n}\n\nexport default Regular\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction ShortBreak({ showNotifications, debugMode }) {\n    return (\n        <NewTimer\n            timerSeconds={5 * 60}\n            showNotifications={showNotifications}\n            reminderSeconds={1 * 30}\n            debug={debugMode}\n        />\n    )\n}\n\nexport default ShortBreak\n","import React from 'react'\nimport { NewTimer } from './counter/NewTimer'\n\nfunction TestBreak({ showNotifications, debugMode, autoCount }) {\n    return (\n        <NewTimer\n            timerSeconds={10}\n            showNotifications={showNotifications}\n            reminderSeconds={10}\n            debug={debugMode}\n            autoCount={autoCount}\n        />\n    )\n}\n\nexport default TestBreak\n","import React from 'react'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK } from './Const'\nimport Blank from './timers/Blank'\nimport LongBreak from './timers/LongBreak'\nimport Regular from './timers/Regular'\nimport ShortBreak from './timers/ShortBreak'\nimport TestBreak from './timers/TestBreak'\n\nexport const Switch = ({ show, showNotifications, debugMode, autoCount }) => {\n    const selectedElement = (componentName) => {\n        if (componentName === LONG_BREAK) {\n            return (\n                <LongBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else if (componentName === SHORT_BREAK) {\n            return (\n                <ShortBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                />\n            )\n        } else if (componentName === REGULAR) {\n            return (\n                <Regular\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                    autoCount={autoCount}\n                />\n            )\n        } else if (componentName === TEST_BREAK) {\n            return (\n                <TestBreak\n                    showNotifications={showNotifications}\n                    debugMode={debugMode}\n                    autoCount={autoCount}\n                />\n            )\n        } else {\n            return <Blank showNotifications={showNotifications} />\n        }\n    }\n\n    return selectedElement(show)\n}\n\nexport default Switch\n","import React from 'react'\nimport {\n    Row,\n    Col,\n    ToggleButton,\n    ToggleButtonGroup,\n    Button,\n    FormControl,\n    InputGroup,\n} from 'react-bootstrap'\nimport { LONG_BREAK, REGULAR, SHORT_BREAK, TEST_BREAK, VERSION } from './Const'\nimport Aim from './Aim'\nimport { Switch } from './Switch'\nimport ReactNotifications from 'react-browser-notifications'\nimport { v4 as uuidv4 } from 'uuid'\n\nclass Main extends React.Component {\n    state = {\n        labels: [],\n        mode: [],\n        numTask: 1,\n        label: '',\n        selected: null,\n        notificationsState: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        },\n        version: VERSION,\n    }\n\n    componentDidMount() {\n        var stateString = localStorage.getItem('state')\n        if (stateString != null) {\n            const savedState = JSON.parse(stateString)\n            if (savedState.version >= VERSION) {\n                this.setState(savedState)\n            }\n        }\n    }\n\n    handleChange = (labels) => {\n        this.setState({ labels: labels })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    messageLabels = {\n        timeUp: {\n            title: 'Yep!',\n            body: 'Time is up!',\n        },\n        reminder: {\n            title: 'Reminder!!!',\n            body: 'You should run the timer!!!!',\n        },\n    }\n\n    updateLabels = (newTitle, newBody) =>\n        this.setState({\n            notificationsState: { title: newTitle, body: newBody },\n        })\n\n    handleChangeMode = (mode) => {\n        this.setState({ mode: mode })\n        localStorage.setItem('state', JSON.stringify(this.state))\n    }\n\n    handleChangeLabel = (label) => {\n        this.setState({ label: label })\n    }\n\n    genId = () => {\n        return uuidv4()\n    }\n\n    addTask = (label) => {\n        if (label != null && label !== '') {\n            this.setState((prevState) => ({\n                labels: prevState.labels.concat([\n                    { id: this.genId(), label: label, done: false, points: 0 },\n                ]),\n                label: '',\n            }))\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    showNotifications = (isReminder) => {\n        if (isReminder) {\n            this.setupRemider()\n        } else {\n            this.setupTimesUp()\n        }\n        if (ReactNotifications.n.supported()) {\n            ReactNotifications.n.show()\n        }\n    }\n\n    setupRemider = () =>\n        this.updateLabels(\n            this.messageLabels.reminder.title,\n            this.messageLabels.reminder.body\n        )\n\n    setupTimesUp = () =>\n        this.updateLabels(\n            this.messageLabels.timeUp.title,\n            this.messageLabels.timeUp.body\n        )\n\n    handleNotificationClick = (event) => {\n        ReactNotifications.n.close(event.target.tag)\n    }\n\n    removeTask = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy.splice(index, 1)\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    moveUpTask = (index) => {\n        if (\n            this.state.labels.length > 1 &&\n            index > 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            var value = copy[index]\n            copy[index] = copy[index - 1]\n            copy[index - 1] = value\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    moveDownTask = (index) => {\n        if (\n            this.state.labels.length > 1 &&\n            index >= 0 &&\n            this.state.labels.length > index + 1\n        ) {\n            var copy = [...this.state.labels]\n            var value = copy[index]\n            copy[index] = copy[index + 1]\n            copy[index + 1] = value\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    toggleDone = (index) => {\n        if (\n            this.state.labels.length >= 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy[index].done = !copy[index].done\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    select = (index) => {\n        if (\n            this.state.labels.length >= 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var selected = this.state.labels[index]\n            if (!selected.done) {\n                this.setState({ selected: selected.id })\n                localStorage.setItem('state', JSON.stringify(this.state))\n            }\n        }\n    }\n\n    plusPoints = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            copy[index].points = copy[index].points + 1\n            this.setState({ labels: copy })\n            localStorage.setItem('state', JSON.stringify(this.state))\n        }\n    }\n\n    minusPoints = (index) => {\n        if (\n            this.state.labels.length > 0 &&\n            index >= 0 &&\n            this.state.labels.length > index\n        ) {\n            var copy = [...this.state.labels]\n            if (copy[index].points > 0) {\n                copy[index].points = copy[index].points - 1\n                this.setState({ labels: copy })\n                localStorage.setItem('state', JSON.stringify(this.state))\n            }\n        }\n    }\n\n    debugElement = (debugMode) => {\n        if (this.props.debugMode) {\n            return (\n                <ToggleButton\n                    value={TEST_BREAK}\n                    disabled={this.state.selected === ''}\n                >\n                    Test break\n                </ToggleButton>\n            )\n        }\n    }\n\n    currentTaskId = () => {\n        return this.state.labels.findIndex(\n            (it) => it.id === this.state.selected\n        )\n    }\n\n    currentTask = () => {\n        const current = this.state.labels\n            .filter((it) => it.id === this.state.selected)\n            .map((it) => it.label)\n        return (\n            <Row>\n                <Col>\n                    <h1>\n                        <strong>Current: {current}</strong>\n                    </h1>\n                </Col>\n            </Row>\n        )\n    }\n\n    handleEnterKeyPress = (target) => {\n        if (target.charCode === 13) {\n            this.addTask(this.state.label)\n        }\n    }\n\n    render() {\n        var incrementer = 0\n        const tasks = this.state.labels.map((it) => (\n            <Aim\n                key={it.id}\n                index={incrementer++}\n                label={it}\n                deleteHook={this.removeTask}\n                plusPointHook={this.plusPoints}\n                minusPointHook={this.minusPoints}\n                upHook={this.moveUpTask}\n                downHook={this.moveDownTask}\n                toggleDone={this.toggleDone}\n                select={this.select}\n                selected={it.id === this.state.selected}\n            />\n        ))\n\n        return (\n            <div className=\"m-2\">\n                {this.currentTask()}\n                <Row>\n                    <Col>\n                        <Switch\n                            show={this.state.mode}\n                            showNotifications={(isRemider) =>\n                                this.showNotifications(isRemider)\n                            }\n                            debugMode={this.props.debugMode}\n                            autoCount={() => {\n                                const index = this.currentTaskId()\n                                this.plusPoints(index)\n                            }}\n                        />\n                        <ReactNotifications\n                            onRef={(ref) => (ReactNotifications.n = ref)}\n                            title={this.state.notificationsState.title} // Required\n                            body={this.state.notificationsState.body}\n                            icon=\"icon.png\"\n                            timeout=\"5000\"\n                            onClick={(event) =>\n                                this.handleNotificationClick(event)\n                            }\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ToggleButtonGroup\n                            className=\"flex-wrap\"\n                            type=\"radio\"\n                            name=\"options\"\n                            value={this.state.mode}\n                            onChange={this.handleChangeMode}\n                        >\n                            <ToggleButton\n                                value={REGULAR}\n                                disabled={this.state.selected === ''}\n                            >\n                                Regular\n                            </ToggleButton>\n                            <ToggleButton\n                                value={SHORT_BREAK}\n                                disabled={this.state.selected === ''}\n                            >\n                                Short break\n                            </ToggleButton>\n                            <ToggleButton\n                                value={LONG_BREAK}\n                                disabled={this.state.selected === ''}\n                            >\n                                Long break\n                            </ToggleButton>\n                            {this.debugElement(this.props.debugMode)}\n                        </ToggleButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>{tasks}</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                value={this.state.label}\n                                aria-label={this.state.label}\n                                aria-describedby=\"basic-addon2\"\n                                onChange={(e) =>\n                                    this.handleChangeLabel(e.target.value)\n                                }\n                                onKeyPress={this.handleEnterKeyPress}\n                            />\n                            <InputGroup.Append>\n                                <Button\n                                    onClick={() =>\n                                        this.addTask(this.state.label)\n                                    }\n                                >\n                                    +\n                                </Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport Header from './Header'\nimport Footer from './Footer'\nimport Main from './Main'\n\nclass App extends React.Component {\n    state = {\n        debugMode: false,\n    }\n\n    setDebugMode = (on) => {\n        this.setState({ debugMode: on })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header name={'PomodoroX'} />\n                <Main debugMode={this.state.debugMode} />\n                <Footer setDebugMode={this.setDebugMode} />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}